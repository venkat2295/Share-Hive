let express,createComment,deleteComment,getAllComments,updateComment,getUserComments,adminGuard,authGuard;_da2‍.x([["default",()=>_da2‍.o]]);_da2‍.w("express",[["default",["express"],function(v){express=v}]]);_da2‍.w("../controllers/commentControllers",[["createComment",["createComment"],function(v){createComment=v}],["deleteComment",["deleteComment"],function(v){deleteComment=v}],["getAllComments",["getAllComments"],function(v){getAllComments=v}],["updateComment",["updateComment"],function(v){updateComment=v}],["getUserComments",["getUserComments"],function(v){getUserComments=v}]]);_da2‍.w("../middleware/authMiddleware",[["adminGuard",["adminGuard"],function(v){adminGuard=v}],["authGuard",["authGuard"],function(v){authGuard=v}]]);
const router = express.Router();









// Existing routes
router
  .route("/")
  .post(authGuard, createComment)
  .get(authGuard, adminGuard, getAllComments);

router
  .route("/:commentId")
  .put(authGuard, updateComment)
  .delete(authGuard, deleteComment);

// New route for user dashboard
router.get("/user", authGuard, getUserComments);

_da2‍.d(router);